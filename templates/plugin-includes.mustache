<?php

namespace {{plugin_namespace}}\{{plugin_class}}\Includes;

use {{plugin_namespace}}\{{plugin_class}}\Admin\{{plugin_class}}_Admin;
use {{plugin_namespace}}\{{plugin_class}}\Admin\{{plugin_class}}_Rest;
use {{plugin_namespace}}\{{plugin_class}}\Admin\{{plugin_class}}_Ajax;
use {{plugin_namespace}}\{{plugin_class}}\Admin\{{plugin_class}}_Settings;
use {{plugin_namespace}}\{{plugin_class}}\_Frontend\{{plugin_class}}_Frontend;
use {{plugin_namespace}}\{{plugin_class}} as NS;


/**
 * The core plugin class.
 *
 * This is used to define internationalization, admin-specific hooks, and
 * public-facing site hooks.
 *
 * Also maintains the unique identifier of this plugin as well as the current
 * version of the plugin.
 *
 * @since      0.0.1
 *
 * @package    {{plugin_namespace}}\{{plugin_class}}\Includes
 */
class {{plugin_class}} {


	/**
	 * The loader that's responsible for maintaining and registering all hooks that power
	 * the plugin.
	 *
	 * @since    0.0.1
	 * @access   protected
	 * @var      {{plugin_class}}_Loader $loader Maintains and registers all hooks for the plugin.
	 */
	protected $loader;

	/**
	 * The unique identifier of this plugin.
	 *
	 * @since    0.0.1
	 * @access   protected
	 * @var      string $plugin_name The string used to uniquely identify this plugin.
	 */
	protected $plugin_name;

	/**
	 * The current version of the plugin.
	 *
	 * @since    0.0.1
	 * @access   protected
	 * @var      string $version The current version of the plugin.
	 */
	protected $version;

	/**
	 * Define the core functionality of the plugin.
	 *
	 * Set the plugin name and the plugin version that can be used throughout the plugin.
	 * Load the dependencies, define the locale, and set the hooks for the admin area and
	 * the public-facing side of the site.
	 *
	 * @since    0.0.1
	 * 
	 * @return void
	 */
	public function __construct() {
		if ( defined( 'NS\PLUGIN_VERSION' ) ) {
			$this->version = NS\PLUGIN_VERSION;
		} else {
			$this->version = '0.0.1';
		}
        if ( defined( 'NS\PLUGIN_NAME' ) ) {
			$this->plugin_name = NS\PLUGIN_NAME;
		} else {
			$this->plugin_name = 'ERROR';
		}
		$this->load_dependencies();
		$this->set_locale();
		$this->define_admin_hooks();
        $this->define_public_hooks();
	}

	/**
	 * Load the required dependencies for this plugin.
	 *
	 * Include the following files that make up the plugin:
	 *
	 * - {{plugin_class}}_API. Our wrapper for the Send in Blue API
	 * - {{plugin_class}}_Loader. Orchestrates the hooks of the plugin.
	 * - {{plugin_class}}_I18n. Defines internationalization functionality.
	 * - {{plugin_class}}_Admin. Defines all hooks for the admin area.
	 *
	 * Handles loading of shortcodes and widgets
	 *
	 * Create an instance of the loader which will be used to register the hooks
	 * with WordPress.
	 *
	 * @since    0.0.1
	 * @access   private
	 * @return void
	 */
	private function load_dependencies() {

		/**
		 * The class responsible for orchestrating the actions and filters of the
		 * core plugin.
		 */
		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-{{plugin_class_lower}}-loader.php';

		/**
		 * The class responsible for defining internationalization functionality
		 * of the plugin.
		 */
		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-{{plugin_class_lower}}-i18n.php';

		/**
		 * The class responsible for defining all actions that occur in the admin area.
		 */
		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'admin/class-{{plugin_class_lower}}-admin.php';

		/**
		 * The class responsible for defining all actions that occur in the frontend area.
		 */
		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'frontend/class-{{plugin_class_lower}}-frontend.php';

		//$this->load_files( dirname( __FILE__ ) . '/shortcodes/' );
		//$this->load_files( dirname( __FILE__ ) . '/widgets/' );
		//$this->load_files( dirname( __FILE__ ) . '/background/' );

		$this->loader = new {{plugin_class}}_Loader();
	}

	/**
	 * Load files in Directory
	 * @since 0.0.1
	 * @param string $dir Directory.
	 * @return void
	 */
	private function load_files( $dir = '' ) {
		$dir = trailingslashit( $dir );
		if ( ! empty( $dir ) && is_dir( $dir ) ) {
			$dh = opendir( $dir );
			if ( $dh ) {
				while ( ( $file = readdir( $dh ) ) !== false ) {
					if ( ! in_array( $file, array(
							'.',
							'..'
						) ) && is_file( $dir . $file ) && 'php' == pathinfo( $dir . $file, PATHINFO_EXTENSION ) ) {
						include_once $dir . $file;
					}
				}
				closedir( $dh );
			}
		}
	}

	/**
	 * Define the locale for this plugin for internationalization.
	 *
	 * Uses the {{plugin_class}}_I18n class in order to set the domain and to register the hook
	 * with WordPress.
	 *
	 * @since    0.0.1
	 * @access   private
	 * @return void
	 */
	private function set_locale() {
		$plugin_i18n = new {{plugin_class}}_I18n();
		$this->loader->add_action( 'plugins_loaded', $plugin_i18n, 'load_plugin_textdomain' );
	}

	/**
	 * Register all of the hooks related to the admin area functionality
	 * of the plugin.
	 *
	 * @since    0.0.1
	 * @access   private
	 * @return void
	 */
	private function define_admin_hooks() {
		// Create the Objects
		$plugin_admin          = new {{plugin_class}}_Admin( $this->get_plugin_name(), $this->get_version() );
		$plugin_admin_settings = new {{plugin_class}}_Settings( $this->get_plugin_name(), $this->get_version() );
		$plugin_admin_ajax     = new {{plugin_class}}_Ajax($this->get_plugin_name(), $this->get_version() );
		$plugin_admin_rest     = new {{plugin_class}}_Rest($this->get_plugin_name(), $this->get_version() );

		// Admin Hooks
		$this->loader->add_action(
			'admin_enqueue_scripts',
			$plugin_admin,
			'enqueue_styles'
		);
		$this->loader->add_action(
			'admin_enqueue_scripts',
			$plugin_admin,
			'enqueue_scripts'
		);

		// Admin Settings Hooks
		$this->loader->add_action( 'admin_init', $plugin_admin_settings, 'init' );
		$this->loader->add_action( 'admin_init', $plugin_admin_settings, 'register_settings' );
		$this->loader->add_action( 'admin_menu', $plugin_admin_settings, 'add_menu_item' );

		// Admin Ajax Hooks
		$this->loader->add_action( 'wp_ajax_' . NS\PLUGIN_PREFIX . '_echo', $plugin_admin_ajax, 'echo' );

		// Admin Rest Hooks
		$this->loader->add_action( 'rest_api_init', $plugin_admin_rest, 'restapi_init' );

	}

    /**
     * Register all of the hooks related to the public-facing functionality
     * of the plugin.
     *
     * @since  1.0.0
     * @access private
     */
    private function define_public_hooks()
    {
        // Create the Objects
        $plugin_public = new {{plugin_class}}_Frontend($this->get_plugin_name(), $this->get_version());

        // Public Hooks
        $this->loader->add_action(
            'wp_enqueue_scripts',
            $plugin_public,
            'enqueue_styles'
        );
        $this->loader->add_action(
            'wp_enqueue_scripts',
            $plugin_public,
            'enqueue_scripts'
        );
    }

	/**
	 * The name of the plugin used to uniquely identify it within the context of
	 * WordPress and to define internationalization functionality.
	 * 
	 * @since     0.0.1
	 *
	 * @return    string    The name of the plugin.
	 */
	public function get_plugin_name() {
		return $this->plugin_name;
	}

	/**
	 * Retrieve the version number of the plugin.
	 * 
	 * @since     0.0.1
	 * 
	 * @return    string    The version number of the plugin.
	 */
	public function get_version() {
		return $this->version;
	}

	/**
	 * Run the loader to execute all of the hooks with WordPress.
	 *
	 * @since    0.0.1
	 * @return void
	 */
	public function run() {
		$this->loader->run();
	}

	/**
	 * The reference to the class that orchestrates the hooks with the plugin.
	 * @since     0.0.1
	 * @return    {{plugin_class}}_Loader    Orchestrates the hooks of the plugin.
	 */
	public function get_loader() {
		return $this->loader;
	}
}
